{"version":3,"sources":["logo.svg","components/ConstFile.js","api/LocationsAPI.js","components/MyMap.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","imgGreen","imgRed","token","localStorage","Math","random","toString","substr","headers","getLoc","pos","fetch","concat","lat","lng","method","then","response","json","catch","err","MyMap","onInfoWindowClose","marker","isOpen","onMarkerClick","LocationsAPI","res","alert","name","venues","location","distance","msg","document","createTextNode","e","createElement","append","className","getElementsByTagName","_this","state","markerpos","map","mp","icon","constants","filter","setState","filterResults","evt","temp","ind","selectedIndex","locations","loc","Object","assign","splice","_this2","this","MyMapComponent","compose","withProps","withScriptjs","withGoogleMap","props","react_default","a","lib","defaultZoom","defaultCenter","key","position","onClick","onCloseClick","street","city","zip","role","aria-label","tabindex","onChange","mk","index","isMarkerShown","googleMapURL","loadingElement","style","height","containerElement","mapElement","React","Component","App","components_MyMap","Boolean","window","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7e72c6c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const latitude =34.078160;\r\nexport const longitude =-84.182760;\r\nexport const  zoom=10;\r\nexport const imgGreen = \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\";\r\nexport const imgRed=\"http://maps.google.com/mapfiles/ms/icons/red-dot.png\";\r\nexport const googleURL = \"https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyA5mPZJgHzfdneW1DELGFyM7tB2Ofxzqdc\";\r\n//export const googleURL = \"https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyA5mPZtB2Ofxzqdc\";\r\nexport const mapError=\"Sorry! Google Map API not loading!!\";","const api = \"https://api.foursquare.com/v2\"\r\n/*Foursquare API for developers is used to extract the distance of the marker from the center location. The client-id, \r\nclient-key and token 'v' are used to access the data from the API*/\r\n\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n    'client_id':\"4G34CKFITGK1WSHHMQ52VHR3BQ2M4NCAS4AIHPIAO32DCXUU\",\r\n        'client_secret':\"5AHREEYCO2KAFXFFW0FR5GSA3X0LOEC3E1CPGEGOZAJ2NA0T\",\r\n        'v':\"20181105\"\r\n  };\r\n\r\n\r\n\r\nexport const getLoc =(pos)=>\r\n\r\nfetch(`https://api.foursquare.com/v2/venues/search?ll=${pos.lat},${pos.lng}&client_id=${headers.client_id}&client_secret=${headers.client_secret}&v=${headers.v}`\r\n      , {\r\n    method: 'GET'\r\n    })\r\n    .then(response =>response.json())\r\n    .catch(err=>err)\r\n\r\n\r\n\r\n\r\n","import React from \"react\"\r\nimport { Component } from \"react\"\r\nimport { compose, withProps } from \"recompose\"\r\nimport locations from \"../data/locations.json\"\r\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow, Map} from \"react-google-maps\"\r\nimport '../App.css'\r\nimport * as constants from './ConstFile.js'\r\nimport * as LocationsAPI from '../api/LocationsAPI'\r\n\r\n var tabct=2;\r\n\r\nclass MyMap extends React.Component{\r\n    \r\n    \r\n\r\n    \r\n    onInfoWindowClose= (marker) => {\r\n  marker.isOpen=false;\r\n    \r\n    }\r\n\r\n\r\n       \r\n    \r\n    onMarkerClick= (marker) => {\r\n        \r\n     LocationsAPI.getLoc(marker.pos)\r\n        .then(res=>alert(marker.name +\" is \"+res.response.venues[0].location.distance+\" miles from your location.\"))\r\n             .catch(function(err){\r\n         \r\n         \r\n            var msg=document.createTextNode(\"Foursquare API Fetch error \\n\"+ err);\r\n            var e= document.createElement(\"p\");\r\n            e.append(msg);\r\n            e.className=\"errMessage\";\r\n            document.getElementsByTagName(\"ul\")[0].append(e);\r\n            \r\n        \r\n            })  \r\n         \r\n        marker.isOpen=true;\r\n        \r\n         this.state.markerpos.map(mp=>mp.isOpen=false);\r\n          this.state.markerpos.map(mp=>mp.icon=constants.imgRed);\r\n        this.state.markerpos.filter(mp=>mp===marker).map(mp=>mp.isOpen=true);\r\n          this.state.markerpos.filter(mp=>mp===marker).map(mp=>mp.icon=constants.imgGreen);\r\n         this.setState({markerpos:this.state.markerpos});     \r\n    }\r\n     \r\n    \r\n    filterResults=(evt)=>{\r\n        var temp;\r\n        var ind = document.getElementsByTagName(\"select\")[0].selectedIndex;\r\n        if(ind === 0)\r\n           {\r\n               \r\n               this.setState({markerpos:locations.map(loc=>Object.assign({},loc,{\"isOpen\":\"\"},{\"icon\":constants.imgRed}))});\r\n               \r\n           }\r\n        else\r\n            {\r\n             \r\n           temp = this.state.markerpos.splice([ind-1],1);\r\n           this.setState({markerpos:temp});\r\n            }\r\n            \r\n    }\r\n   \r\n  state={\r\n      \r\n         \r\n          markerpos: locations.map(loc=>Object.assign({},loc,{\"isOpen\":\"\"},{\"icon\":constants.imgRed}))\r\n         \r\n        }\r\n    \r\n    \r\n        \r\n    render(){\r\n        \r\n     \r\n       var MyMapComponent  =  compose(    \r\n      withProps({}),\r\n      withScriptjs,withGoogleMap)(props =>\r\n                                 <GoogleMap\r\n                                    defaultZoom={constants.zoom}\r\n                                    defaultCenter={{ lat:constants.latitude,lng:constants.longitude}}\r\n                                  \r\n                                 >\r\n        {this.state.markerpos.map((marker,ind)=>\r\n           \r\n            <Marker\r\n              key={ind}\r\n              position={marker.pos}\r\n              icon={marker.icon}\r\n               onClick={evt=>this.onMarkerClick(marker)}  \r\n               \r\n            >\r\n            {marker.isOpen&&<InfoWindow onCloseClick={evt=>this.onInfoWindowClose(marker)}><h4>{marker.street+marker.city+marker.state+marker.zip}</h4></InfoWindow>}\r\n            </Marker>\r\n          )}\r\n\r\n  \r\n  </GoogleMap>\r\n\r\n   )\r\n   \r\n   \r\n   \r\n      \r\n        return (\r\n        \r\n                <div className=\"pageContainer\">\r\n             \r\n                <div className='leftpane' role=\"navigation\" aria-label=\"menu\"> \r\n                \r\n                <ul className=\"listLocations\" role=\"listbox\" aria-label=\"listlocations\">\r\n                <select className=\"selclass\"  role=\"listbox\" aria-label=\"selectCity\" tabindex='2' onChange={evt=>this.filterResults(evt)}> \r\n\r\n                    <option>All </option>\r\n              {this.state.markerpos.map((mk)=>\r\n    \r\n                <option>{mk.city +  \" \" +mk.state} </option>\r\n    \r\n    \r\n                    )}\r\n        \r\n                 \r\n                 </select>\r\n            \r\n              \r\n              {this.state.markerpos.map((mk,index)=>\r\n    \r\n                <li  tabindex={tabct + index} onClick={evt=>this.onMarkerClick(mk)}>{mk.city +  \" \" +mk.state} </li>\r\n    \r\n    \r\n              )}\r\n                        \r\n              </ul>\r\n                 \r\n                  \r\n        \r\n          </div>\r\n   \r\n    <div className=\"rightpane\" aria-label=\"map\" role=\"application\" tabindex='3'>\r\n       \r\n      <MyMapComponent\r\n              isMarkerShown=\"true\"\r\n                 googleMapURL={constants.googleURL}\r\n            loadingElement={<div style={{ height: `100%` }} />}\r\n              containerElement={<div style={{ height: `400px` }} />}\r\n              mapElement={<div style={{ height: `100%` }} />}\r\n                          \r\n      />\r\n                  \r\n\r\n                  \r\n       </div>\r\n        \r\n        </div>\r\n        \r\n\r\n        )\r\n\r\n       \r\n\r\n \r\n \r\n    \r\n    }\r\n}\r\nexport default MyMap","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Component } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport * as constants from './components/ConstFile.js'\nimport locations from './data/locations.json'\nimport MyMap from './components/MyMap.js'\n\nimport {\n  BrowserRouter as Router,\n  Link,\n  Route,\n  Switch\n} from 'react-router-dom'\n\nclass App extends React.Component {\n    \n  render() {\n    return (\n        \n        <div className=\"app\">\n            <div className=\"title\"  role=\"banner\" aria-label=\"header\" tabindex='1'> Libraries Near Me </div>\n                   \n            <MyMap />\n    \n        </div>\n        \n             \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as constants from './components/ConstFile.js'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n//serviceWorker.register();\n"],"sourceRoot":""}